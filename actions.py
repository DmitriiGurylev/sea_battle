from telebot import types
from telebot.types import Message

from bot_init import bot, players, stage
from cells import ship_cell
from helpers import get_monospace_text, get_field, check_turn, get_user_by_id, \
    cells_set, get_stage_ship_decks_2_text, get_stage_ship_decks_3_text, get_stage_ship_decks_4_text
from ship import Ship
from validation import validate_ships, to_coord


def assign_ships(message):
    if stage.v != 1:
        bot.send_message(message.chat.id, '–†–∞—Å—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ—Ä–∞–±–ª–∏ –µ—â–µ —Ä–∞–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞')
        return

    text_list_ships = message.text.lower().split()
    current_player = get_user_by_id(message.chat.id)

    ships_to_assign = current_player.stage_assign_decks

    match ships_to_assign:
        case 1:
            res = assign_s(current_player, text_list_ships, message, 1)
            if res:
                current_player.stage_assign_decks = 2
                bot.send_message(message.chat.id, get_stage_ship_decks_2_text(current_player), parse_mode='html')
        case 2:
            res = assign_s(current_player, text_list_ships, message, 2)
            if res:
                current_player.stage_assign_decks = 3
                bot.send_message(message.chat.id, get_stage_ship_decks_3_text(current_player), parse_mode='html')
        case 3:
            res = assign_s(current_player, text_list_ships, message, 3)
            if res:
                current_player.stage_assign_decks = 4
                bot.send_message(message.chat.id, get_stage_ship_decks_4_text(current_player), parse_mode='html')
        case 4:
            res = assign_s(current_player, text_list_ships, message, 4)
            if res:
                keyboard = types.InlineKeyboardMarkup()
                key_commit = types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ', callback_data='commit_ships')
                key_reassign = types.InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ üîÅ', callback_data='reassign_ships')
                keyboard.add(key_commit)
                keyboard.add(key_reassign)
                bot.send_message(message.chat.id,
                                 get_monospace_text(get_field(current_player.field))+
                                 '\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –∑–∞–Ω–æ–≤–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∞–±–ª–∏?',
                                 reply_markup=keyboard,
                                 parse_mode='html')


def assign_s(current_player, text_list_ships, message, decks):
    f_working = current_player.field
    ships = text_list_ships

    busy_cells = current_player.busy_cells.copy()
    if not validate_ships(busy_cells, ships, decks):
        decks_str = None
        match decks:
            case 1:
                decks_str = '–æ–¥–Ω–æ–ø–∞–ª—É–±–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏'
            case 2:
                decks_str = '–¥–≤—É—Ö–ø–∞–ª—É–±–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏'
            case 3:
                decks_str = '—Ç—Ä–µ—Ö–ø–∞–ª—É–±–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏'
            case 4:
                decks_str = '—á–µ—Ç—ã—Ä–µ—Ö–ø–∞–ª—É–±–Ω—ã–π –∫–æ—Ä–∞–±–ª—å'

        bot.send_message(message.chat.id,
                         '–£ –≤–∞—Å –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å '+decks_str+' –∑–∞–Ω–æ–≤–æ\n' +
                         get_monospace_text(get_field(f_working)),
                         parse_mode='html')
        return False

    current_player.busy_cells = busy_cells
    cells_ships = set()
    for sh in ships:
        current_player.ships.append(Ship(sh))
        if isinstance(sh, list):
            [cells_ships.add(cell) for cell in sh]
        elif isinstance(sh, int):
            cells_ships.add(sh)
        else:
            pass
    for i in range(len(f_working)):
        if i in cells_ships:
            f_working[i] = ship_cell
    return True


def valid_cell_to_attack(text):
    return text.split()[0].lower() in cells_set


def attack_cell(msg: Message) -> None:
    if stage.v != 2:
        bot.send_message(msg.chat.id, '–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–∞.')
        return
    cur_pl = get_user_by_id(msg.chat.id)
    if not check_turn(cur_pl):
        bot.send_message(msg.chat.id, '–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç –≤–∞—à –æ–ø–ø–æ–Ω–µ–Ω—Ç. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏')
        return
    if not valid_cell_to_attack(msg.text):
        bot.send_message(msg.chat.id, '–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —è—á–µ–π–∫–∞. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
        return
    cell_to_attack = msg.text
    cur_pl = get_user_by_id(msg.chat.id)
    if not check_turn(cur_pl):
        bot.send_message(msg.chat.id, '–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç –≤–∞—à –æ–ø–ø–æ–Ω–µ–Ω—Ç. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏')
        return
    letter, digit = cell_to_attack[0].lower(), int(cell_to_attack[1:])
    coord_to_attack = to_coord(letter, digit)
    en = cur_pl.enemy
    if en.repeated_cell(coord_to_attack):
        bot.send_message(msg.chat.id, '–í —ç—Ç—É —è—á–µ–π–∫—É –Ω–µ–ª—å–∑—è —Å—Ç—Ä–µ–ª—è—Ç—å')
        return
    found, sh = en.find_ship_by_cell_attacked(coord_to_attack)

    bot.send_message(cur_pl.player_id, '–í—ã —Å—Ç—Ä–µ–ª—è–µ—Ç–µ: ' + letter + str(digit))
    bot.send_message(en.player_id, '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å—Ç—Ä–µ–ª—è–µ—Ç : ' + letter + str(digit))
    if found:
        dead_ship = en.attack_ship(coord_to_attack, sh)
        if en.all_ships_dead():
            del players[:]
            stage.v = 3
            bot.send_message(cur_pl.player_id, '–í—ã –ø–æ–±–µ–¥–∏–ª–∏. –í—ã –ø–æ—Ç–æ–ø–∏–ª–∏ –≤—Å–µ –≤—Ä–∞–∂–µ—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏')
            bot.send_message(en.player_id, '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à–∏ –∫–æ—Ä–∞–±–ª–∏ –ø–æ—Ç–æ–ø–ª–µ–Ω—ã')
            # TODO
            return

        if dead_ship:
            attack_msg = '–ö–æ—Ä–∞–±–ª—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø–æ—Ç–æ–ø–ª–µ–Ω!\n'
            attack_enemy_msg = '–í–∞—à –∫–æ—Ä–∞–±–ª—å –ø–æ—Ç–æ–ø–ª–µ–Ω!\n'
        else:
            attack_msg = '–ü–æ–ø–∞–¥–∞–Ω–∏–µ –ø–æ –≤—Ä–∞–≥—É!\n'
            attack_enemy_msg = '–ü–æ –≤–∞–º –ø–æ–ø–∞–ª–∏!\n'

        bot.send_message(cur_pl.player_id, attack_msg +
                         '\n–í–∞—à–µ –ø–æ–ª–µ:\n' + get_monospace_text(get_field(cur_pl.field)) +
                         '\n–ü–æ–ª–µ –≤—Ä–∞–≥–∞:\n' + get_monospace_text(get_field(en.field_to_enemy)) +
                         '\n–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É –¥–ª—è –∞—Ç–∞–∫–∏',
                         parse_mode='html')
        bot.send_message(en.player_id,
                         attack_enemy_msg +
                         '\n–í–∞—à–µ –ø–æ–ª–µ:\n' + get_monospace_text(get_field(en.field)) +
                         '\n–ü–æ–ª–µ –≤—Ä–∞–≥–∞:\n' + get_monospace_text(get_field(cur_pl.field_to_enemy)) +
                         '\n–û–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥–∞ –≤—Ä–∞–≥–∞',
                         parse_mode='html')
    else:
        cur_pl.turn = False
        en.turn = True
        en.attack_sea(coord_to_attack)
        bot.send_message(cur_pl.player_id, '–í—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å.\n' +
                         '\n–í–∞—à–µ –ø–æ–ª–µ:\n' + get_monospace_text(get_field(cur_pl.field)) +
                         '\n–ü–æ–ª–µ –≤—Ä–∞–≥–∞:\n' + get_monospace_text(get_field(en.field_to_enemy)) +
                         '\n–û–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥–∞ –≤—Ä–∞–≥–∞',
                         parse_mode='html'
                         )
        bot.send_message(en.player_id, '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è.\n' +
                         '\n–í–∞—à–µ –ø–æ–ª–µ:\n' + get_monospace_text(get_field(en.field)) +
                         '\n–ü–æ–ª–µ –≤—Ä–∞–≥–∞:\n' + get_monospace_text(get_field(cur_pl.field_to_enemy)) +
                         '\n–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É –¥–ª—è –∞—Ç–∞–∫–∏',
                         parse_mode='html')
