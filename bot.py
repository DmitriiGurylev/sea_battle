from aiogram import executor
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types.inline_keyboard import InlineKeyboardMarkup, InlineKeyboardButton

from bot_init import bot, parties
from bot_init import dp
from cells import ship_cell
from helpers import cells_set, stage_2_pl_1_text, stage_2_pl_2_text, \
    check_turn, assign_enemies
from helpers import get_stage_ship_decks_1_text, get_stage_ship_decks_2_text, get_stage_ship_decks_3_text, \
    get_stage_ship_decks_4_text, get_user_by_id, get_monospace_text, get_field
from party import Party
from player_profile import PlayerProfile as Pl, PlayerNumber as Pl_num
from ship import Deck, Ship
from validation import to_coord
from validation import validate_ships


class FSMShips(StatesGroup):
    ships_1_deck = State()
    ships_2_decks = State()
    ships_3_decks = State()
    ship_4_decks = State()


@dp.message_handler(commands=['assign'])
async def assign_ships_start(message: types.Message):
    current_player = get_user_by_id(message.chat.id)
    await message.answer(text=get_stage_ship_decks_1_text(current_player), parse_mode='html')
    await FSMShips.ships_1_deck.set()


@dp.message_handler(state=FSMShips.ships_1_deck)
async def assign_ships_1_deck(message: types.Message, state: FSMContext):
    current_player = get_user_by_id(message.chat.id)
    res = await assign_s(current_player, message, Deck.one)
    if res:
        current_player.stage_assign_decks = 2
        await state.update_data(username=message.text)
        await message.answer(text=get_stage_ship_decks_2_text(current_player), parse_mode='html')
        await FSMShips.next()


@dp.message_handler(state=FSMShips.ships_2_decks)
async def assign_ships_2_deck(message: types.Message, state: FSMContext):
    current_player = get_user_by_id(message.chat.id)
    res = await assign_s(current_player, message, Deck.two)
    if res:
        current_player.stage_assign_decks = 3
        await state.update_data(username=message.text)
        await message.answer(text=get_stage_ship_decks_3_text(current_player), parse_mode='html')
        await FSMShips.next()


@dp.message_handler(state=FSMShips.ships_3_decks)
async def assign_ships_3_deck(message: types.Message, state: FSMContext):
    current_player = get_user_by_id(message.chat.id)
    res = await assign_s(current_player, message, Deck.three)
    if res:
        current_player.stage_assign_decks = 4
        await state.update_data(username=message.text)
        await message.answer(text=get_stage_ship_decks_4_text(current_player), parse_mode='html')
        await FSMShips.next()


@dp.message_handler(state=FSMShips.ship_4_decks)
async def assign_ships_finish(message: types.Message, state: FSMContext):
    current_player = get_user_by_id(message.chat.id)
    await state.update_data(username=message.text)
    res = await assign_s(current_player, message, Deck.four)
    if res:
        keyboard = InlineKeyboardMarkup()
        key_commit = InlineKeyboardButton(
            text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ',
            callback_data='commit_ships')
        key_reassign = InlineKeyboardButton(
            text='–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ üîÅ',
            callback_data='reassign_ships')
        keyboard.add(key_commit)
        keyboard.add(key_reassign)
        await message.answer(
            text=get_monospace_text(get_field(current_player.field)) +
                 '\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –∑–∞–Ω–æ–≤–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∞–±–ª–∏?',
            reply_markup=keyboard,
            parse_mode='html')
        await state.finish()
    else:
        await message.answer(text='–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã')


async def assign_s(current_player: Pl, message: types.Message, deck_count: Deck):
    f_working = current_player.field
    ships = message.text.lower().split()

    busy_cells = current_player.busy_cells.copy()
    if not await validate_ships(busy_cells, ships, deck_count, message):
        decks_str = None
        match deck_count:
            case Deck.one:
                decks_str = '–æ–¥–Ω–æ–ø–∞–ª—É–±–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏'
            case Deck.two:
                decks_str = '–¥–≤—É—Ö–ø–∞–ª—É–±–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏'
            case Deck.three:
                decks_str = '—Ç—Ä–µ—Ö–ø–∞–ª—É–±–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏'
            case Deck.four:
                decks_str = '—á–µ—Ç—ã—Ä–µ—Ö–ø–∞–ª—É–±–Ω—ã–π –∫–æ—Ä–∞–±–ª—å'

        await message.answer('–£ –≤–∞—Å –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å ' + decks_str + ' –∑–∞–Ω–æ–≤–æ\n' +
                             get_monospace_text(get_field(f_working)),
                             parse_mode='html')
        return False

    current_player.busy_cells = busy_cells
    cells_ships = set()
    for sh in ships:
        current_player.ships.append(Ship(sh))
        if isinstance(sh, list):
            [cells_ships.add(cell) for cell in sh]
        elif isinstance(sh, int):
            cells_ships.add(sh)
        else:
            pass
    for i in range(len(f_working)):
        if i in cells_ships:
            f_working[i] = ship_cell
    return True


@dp.message_handler(commands=['start'])  # handle the command "start"
async def start_welcome(message: types.Message):
    msg = "–ü—Ä–∏–≤–µ—Ç, " + message.from_user.first_name + "!\n" + \
          "–≠—Ç–æ –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –º–æ—Ä—Å–∫–æ–π –±–æ–π\n" + \
          "–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–ª–∞—Ç—å –º–Ω–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n" + \
          "1) /info, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ\n" + \
          "2) /play, —á—Ç–æ–±—ã –ø–æ–∏–≥—Ä–∞—Ç—å —Å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º"
    await message.answer(msg)


@dp.message_handler(commands=['info'])  # handle the command "info"
async def send_info_message(message: types.Message):
    msg = "–≠—Ç–æ–≥–æ –±–æ—Ç–∞ —Å–æ–∑–¥–∞–ª [—ç—Ç–æ—Ç](tg://user?id={416544613}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram.\n" \
          "[VK](vk.com/id46566190)\n" \
          "[Instagram](instagram.com/dmitrygurylev/)"
    await message.answer(msg, parse_mode='Markdown')


@dp.message_handler(commands=['rules'])  # handle the command "rules"
async def send_rules_message(message: types.Message):
    msg = "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n" \
          "–ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ ‚Äî –∫–≤–∞–¥—Ä–∞—Ç 10√ó10.\n\n" \
          "–ß–∏—Å–ª–æ –∫–æ—Ä–∞–±–ª–µ–π:\n" \
          "1 –∫–æ—Ä–∞–±–ª—å ‚Äî —Ä—è–¥ –∏–∑ 4 –∫–ª–µ—Ç–æ–∫ (¬´—á–µ—Ç—ã—Ä—ë—Ö–ø–∞–ª—É–±–Ω—ã–π¬ª)\n" \
          "2 –∫–æ—Ä–∞–±–ª—è ‚Äî —Ä—è–¥ –∏–∑ 3 –∫–ª–µ—Ç–æ–∫ (¬´—Ç—Ä—ë—Ö–ø–∞–ª—É–±–Ω—ã–µ¬ª)\n" \
          "3 –∫–æ—Ä–∞–±–ª—è ‚Äî —Ä—è–¥ –∏–∑ 2 –∫–ª–µ—Ç–æ–∫ (¬´–¥–≤—É—Ö–ø–∞–ª—É–±–Ω—ã–µ¬ª)\n" \
          "4 –∫–æ—Ä–∞–±–ª—è ‚Äî 1 –∫–ª–µ—Ç–∫–∞ (¬´–æ–¥–Ω–æ–ø–∞–ª—É–±–Ω—ã–µ¬ª)\n\n" \
          "–ò–≥—Ä–æ–∫, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π —Ö–æ–¥, —Å–æ–≤–µ—Ä—à–∞–µ—Ç –≤—ã—Å—Ç—Ä–µ–ª ‚Äî –ø–∏—à–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–∫–∏, " \
          "–≤ –∫–æ—Ç–æ—Ä–æ–π, –ø–æ –µ–≥–æ –º–Ω–µ–Ω–∏—é, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–æ—Ä–∞–±–ª—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–í1¬ª.\n" \
          "–ï—Å–ª–∏ –≤—ã—Å—Ç—Ä–µ–ª –ø—Ä–∏—à—ë–ª—Å—è –≤ –∫–ª–µ—Ç–∫—É, –Ω–µ –∑–∞–Ω—è—Ç—É—é –Ω–∏ –æ–¥–Ω–∏–º –∫–æ—Ä–∞–±–ª—ë–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, " \
          "—Ç–æ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–≤–µ—Ç ¬´–ú–∏–º–æ!¬ª –∏ —Å—Ç—Ä–µ–ª—è–≤—à–∏–π –∏–≥—Ä–æ–∫ —Å—Ç–∞–≤–∏—Ç –Ω–∞ —á—É–∂–æ–º –∫–≤–∞–¥—Ä–∞—Ç–µ –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ —Ç–æ—á–∫—É. " \
          "–ü—Ä–∞–≤–æ —Ö–æ–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–æ–ø–µ—Ä–Ω–∏–∫—É.\n" \
          "–ï—Å–ª–∏ –≤—ã—Å—Ç—Ä–µ–ª –ø—Ä–∏—à—ë–ª—Å—è –≤ –∫–ª–µ—Ç–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–Ω–æ–≥–æ–ø–∞–ª—É–±–Ω—ã–π –∫–æ—Ä–∞–±–ª—å (—Ä–∞–∑–º–µ—Ä–æ–º –±–æ–ª—å—à–µ —á–µ–º 1 –∫–ª–µ—Ç–∫–∞), " \
          "—Ç–æ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–≤–µ—Ç ¬´–†–∞–Ω–∏–ª(–∞)!¬ª. " \
          "–°—Ç—Ä–µ–ª—è–≤—à–∏–π –∏–≥—Ä–æ–∫ —Å—Ç–∞–≤–∏—Ç –Ω–∞ —á—É–∂–æ–º –ø–æ–ª–µ –≤ —ç—Ç—É –∫–ª–µ—Ç–∫—É –∫—Ä–µ—Å—Ç–∏–∫, " \
          "–∞ –µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å—Ç–∞–≤–∏—Ç –∫—Ä–µ—Å—Ç–∏–∫ –Ω–∞ —Å–≤–æ—ë–º –ø–æ–ª–µ —Ç–∞–∫–∂–µ –≤ —ç—Ç—É –∫–ª–µ—Ç–∫—É. " \
          "–°—Ç—Ä–µ–ª—è–≤—à–∏–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ –µ—â—ë –æ–¥–∏–Ω –≤—ã—Å—Ç—Ä–µ–ª.\n" \
          "–ï—Å–ª–∏ –≤—ã—Å—Ç—Ä–µ–ª –ø—Ä–∏—à—ë–ª—Å—è –≤ –∫–ª–µ—Ç–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω—ã–π –∫–æ—Ä–∞–±–ª—å, " \
          "–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–ø–æ—Ä–∞–∂—ë–Ω–Ω—É—é –∫–ª–µ—Ç–∫—É –º–Ω–æ–≥–æ–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è, " \
          "—Ç–æ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–≤–µ—Ç ¬´–£–±–∏–ª(–∞)!¬ª. –û–±–∞ –∏–≥—Ä–æ–∫–∞ –æ—Ç–º–µ—á–∞—é—Ç –ø–æ—Ç–æ–ø–ª–µ–Ω–Ω—ã–π –∫–æ—Ä–∞–±–ª—å –Ω–∞ –ª–∏—Å—Ç–µ. " \
          "–°—Ç—Ä–µ–ª—è–≤—à–∏–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ –µ—â—ë –æ–¥–∏–Ω –≤—ã—Å—Ç—Ä–µ–ª.\n\n" \
          "–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º –ø–æ—Ç–æ–ø–∏—Ç –≤—Å–µ 10 –∫–æ—Ä–∞–±–ª–µ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞"
    await message.answer(msg)


@dp.message_handler(commands=['play'])  # handle the command "play"
async def start_welcome(message: types.Message):
    if len(parties) == 0 or len(parties[len(parties) - 1].players) == 2:
        cur_party = Party()
        parties.append(cur_party)
    else:
        cur_party = parties[len(parties) - 1]

    if len(cur_party.players) == 0:
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏")
        pl_1 = Pl(message.chat.id)
        pl_1.party = cur_party
        cur_party.players.append(pl_1)
        pl_1.player_number = Pl_num.first
        await message.answer("–í—ã –ø–µ—Ä–≤—ã–π. –û–∂–∏–¥–∞–π—Ç–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞")
    elif len(cur_party.players) == 1:
        pl_2 = Pl(message.chat.id)
        pl_2.party = cur_party
        cur_party.players.append(pl_2)
        assign_enemies(cur_party)
        pl_2.player_number = Pl_num.second
        await message.answer("–í—ã –≤—Ç–æ—Ä–æ–π.")
        cur_party.stage.v = 1
        for p in cur_party.players:
            p.stage_assign_decks = 1
            await bot.send_message(
                p.player_id,
                '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /assign –¥–ª—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ—Ä–∞–±–ª–µ–π')
    else:
        await message.answer('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏')


@dp.message_handler(content_types=['text'])  # handle with text
async def handle_text(message: types.Message):
    message_text_array = message.text.split()
    if message_text_array[0].lower() in cells_set:
        cur_pl = get_user_by_id(message.chat.id)
        cur_party = Party.get_current_party_by_player(cur_pl)
        if cur_party.stage.v != 2:
            await message.answer('–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–∞.')
            return
        if not check_turn(cur_pl):
            await message.answer('–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç –≤–∞—à –æ–ø–ø–æ–Ω–µ–Ω—Ç. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏')
            return
        cell_to_attack = message.text
        cur_pl = get_user_by_id(message.chat.id)
        if not check_turn(cur_pl):
            await message.answer('–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç –≤–∞—à –æ–ø–ø–æ–Ω–µ–Ω—Ç. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏')
            return
        letter, digit = cell_to_attack[0].lower(), int(cell_to_attack[1:])
        coord_to_attack = to_coord(letter, digit)
        en = cur_pl.enemy
        if en.repeated_cell(coord_to_attack):
            await message.answer('–í —ç—Ç—É —è—á–µ–π–∫—É –Ω–µ–ª—å–∑—è —Å—Ç—Ä–µ–ª—è—Ç—å')
            return
        found, sh = en.find_ship_by_cell_attacked(coord_to_attack)

        bot.send_message(cur_pl.player_id, '–í—ã —Å—Ç—Ä–µ–ª—è–µ—Ç–µ: ' + letter + str(digit))
        bot.send_message(en.player_id, '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å—Ç—Ä–µ–ª—è–µ—Ç : ' + letter + str(digit))
        if found:
            dead_ship = en.attack_ship(coord_to_attack, sh)
            if en.all_ships_dead():
                bot.send_message(cur_pl.player_id, '–í—ã –ø–æ–±–µ–¥–∏–ª–∏. –í—ã –ø–æ—Ç–æ–ø–∏–ª–∏ –≤—Å–µ –≤—Ä–∞–∂–µ—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏')
                bot.send_message(en.player_id, '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à–∏ –∫–æ—Ä–∞–±–ª–∏ –ø–æ—Ç–æ–ø–ª–µ–Ω—ã')
                parties.remove(cur_party)

                return

            if dead_ship:
                attack_msg = '–ö–æ—Ä–∞–±–ª—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø–æ—Ç–æ–ø–ª–µ–Ω!\n'
                attack_enemy_msg = '–í–∞—à –∫–æ—Ä–∞–±–ª—å –ø–æ—Ç–æ–ø–ª–µ–Ω!\n'
            else:
                attack_msg = '–ü–æ–ø–∞–¥–∞–Ω–∏–µ –ø–æ –≤—Ä–∞–≥—É!\n'
                attack_enemy_msg = '–ü–æ –≤–∞–º –ø–æ–ø–∞–ª–∏!\n'

            bot.send_message(cur_pl.player_id, attack_msg +
                             '\n–í–∞—à–µ –ø–æ–ª–µ:\n' + get_monospace_text(get_field(cur_pl.field)) +
                             '\n–ü–æ–ª–µ –≤—Ä–∞–≥–∞:\n' + get_monospace_text(get_field(en.field_to_enemy)) +
                             '\n–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É –¥–ª—è –∞—Ç–∞–∫–∏',
                             parse_mode='html')
            bot.send_message(en.player_id,
                             attack_enemy_msg +
                             '\n–í–∞—à–µ –ø–æ–ª–µ:\n' + get_monospace_text(get_field(en.field)) +
                             '\n–ü–æ–ª–µ –≤—Ä–∞–≥–∞:\n' + get_monospace_text(get_field(cur_pl.field_to_enemy)) +
                             '\n–û–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥–∞ –≤—Ä–∞–≥–∞',
                             parse_mode='html')
        else:
            cur_pl.turn = False
            en.turn = True
            en.attack_sea(coord_to_attack)
            await bot.send_message(cur_pl.player_id, '–í—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å.\n' +
                             '\n–í–∞—à–µ –ø–æ–ª–µ:\n' + get_monospace_text(get_field(cur_pl.field)) +
                             '\n–ü–æ–ª–µ –≤—Ä–∞–≥–∞:\n' + get_monospace_text(get_field(en.field_to_enemy)) +
                             '\n–û–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥–∞ –≤—Ä–∞–≥–∞',
                             parse_mode='html'
                             )
            await bot.send_message(en.player_id, '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è.\n' +
                             '\n–í–∞—à–µ –ø–æ–ª–µ:\n' + get_monospace_text(get_field(en.field)) +
                             '\n–ü–æ–ª–µ –≤—Ä–∞–≥–∞:\n' + get_monospace_text(get_field(cur_pl.field_to_enemy)) +
                             '\n–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É –¥–ª—è –∞—Ç–∞–∫–∏',
                             parse_mode='html')
    else:
        "–ó–ê–ì–õ–£–®–ö–ê"


@dp.callback_query_handler(lambda c: c.data == 'commit_ships')
async def callback_assign(call: types.CallbackQuery):
    cur_pl = get_user_by_id(call.from_user.id)
    cur_pl.stage_assign_decks = 0
    cur_pl.ready_to_play = True
    cur_pl.turn = True
    cur_party = Party.get_current_party_by_player(cur_pl)

    enemy = cur_pl.enemy

    first_player = cur_pl if cur_pl.player_number == Pl_num.first else enemy

    if enemy.ready_to_play:
        cur_party.stage.v = 2
        bot.send_message(cur_pl.player_id, '–ü—Ä–∏–Ω—è—Ç–æ')
        if cur_pl == first_player:
            await bot.send_message(cur_pl.player_id, stage_2_pl_1_text(cur_pl), parse_mode='html')
            await bot.send_message(enemy.player_id, stage_2_pl_2_text(enemy), parse_mode='html')
        else:
            await bot.send_message(enemy.player_id, stage_2_pl_1_text(enemy), parse_mode='html')
            await bot.send_message(cur_pl.player_id, stage_2_pl_2_text(cur_pl), parse_mode='html')
    else:
        if cur_pl == first_player:
            await bot.send_message(cur_pl.player_id, '–ü—Ä–∏–Ω—è—Ç–æ. –î–æ–∂–¥–∏—Ç–µ—Å—å –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞')
        else:
            await bot.send_message(cur_pl.player_id, '–ü—Ä–∏–Ω—è—Ç–æ. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞')


@dp.callback_query_handler(lambda c: c.data == 'reassign_ships')
async def process_callback_button1(call: types.CallbackQuery):
    current_player = get_user_by_id(call.from_user.id)
    current_player.stage_assign_decks = 1
    current_player.remove_ship_assignation()
    await bot.answer_callback_query(call.id)
    await bot.send_message(
        chat_id=call.from_user.id,
        text='–ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /assign –¥–ª—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ—Ä–∞–±–ª–µ–π')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
